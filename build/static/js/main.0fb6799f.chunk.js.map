{"version":3,"sources":["images/loading.svg","components/context.tsx","translations/dictionary.tsx","components/warning.tsx","components/topnav.tsx","components/join.tsx","components/login.tsx","components/reset.tsx","components/sent.tsx","components/layout.tsx","routes/home.tsx","routes/face.tsx","routes/not-found.tsx","serviceWorker.ts","index.tsx","Router.tsx"],"names":["module","exports","Context","React","createContext","Translations","cn","language","siteName","offline","online","confirmed","invalid","pleaseConfirmYourEmail","updateYourEmail","or","resendConfirmation","join","login","emailIsInvalid","your","password","email","resetPassword","justRemembered","fullNameIsRequired","fullNameIsTooLong","emailIsRequired","passwordIsRequired","passwordLength","Join","today","name","joinNow","byJoiningYouAgreeToOur","termsOfService","and","privacyPolicy","alreadyHaveAnAcocunt","logIn","welcomeBackTo","forgotPassword","dontHaveAnAccount","emailSent","enterYourEmailToReset","resetEmailSent","weWillSendPasswordResetIf","en","Warning","props","useContext","global","setGlobal","txt","resend","a","warningMessage","jwtToken","localStorage","getItem","fetch","apiUrl","method","headers","body","JSON","stringify","response","console","log","status","setTimeout","className","TransitionGroup","CSSTransition","key","timeout","classNames","to","pathname","onClick","TopNav","openModal","event","modal","modalState","target","id","loggedIn","fullName","useState","loading","fullNameError","emailError","passwordError","state","setState","useRef","joinForm","validateFullName","length","validateEmail","test","validatePassword","useEffect","current","reset","focus","close","preventDefault","value","json","content","setItem","warning","message","ref","type","in","appear","color","src","alt","Login","loginForm","emailConfirmed","Reset","resetForm","Sent","sentForm","Layout","admin","layoutGrid","layoutHeader","currentFolder","location","split","modeChanged","darkMode","matches","nowOffline","nowOnline","window","matchMedia","addEventListener","removeEventListener","children","Home","Face","NotFound","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","Provider","exact","path","component","document","getElementById","URL","process","href","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0fb6799f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.6a19979e.svg\";","import React from \"react\";\nconst Context = React.createContext({});\nexport { Context };","const Translations: { [key: string]: {\n    language: string,\n    siteName: string,\n    offline: string,\n    online: string;\n    confirmed: string,\n    invalid: string,\n    pleaseConfirmYourEmail: string,\n    updateYourEmail: string,\n    or: string,\n    resendConfirmation: string,\n    join: string,\n    login: string,\n    emailIsInvalid: string,\n    your: string,\n    password: string,\n    email: string,\n    resetPassword: string,\n    justRemembered: string,\n    fullNameIsRequired: string,\n    fullNameIsTooLong: string,\n    emailIsRequired: string,\n    passwordIsRequired: string,\n    passwordLength: string,\n    Join: string,\n    today: string,\n    name: string,\n    joinNow: string,\n    byJoiningYouAgreeToOur: string,\n    termsOfService: string,\n    and: string,\n    privacyPolicy: string,\n    alreadyHaveAnAcocunt: string,\n    logIn: string,\n    welcomeBackTo: string,\n    forgotPassword:  string,\n    dontHaveAnAccount: string,\n    emailSent: string,\n    enterYourEmailToReset: string,\n    resetEmailSent: string,\n    weWillSendPasswordResetIf: string\n  }} = {\n  cn: {\n    language: 'Chinese',\n    siteName: 'Dicky',\n    offline: 'You are no longer connected to the Internet',\n    online: 'Back online!',\n    confirmed: 'Thanks! Your email address has been confirmed.',\n    invalid: 'Invalid confirmation code!',\n    pleaseConfirmYourEmail: 'Please confirm your email address or  ',\n    updateYourEmail: 'Update your email',\n    or: 'or',\n    resendConfirmation: 'Resend confirmation',\n    join: 'Join',\n    login: 'Log In',\n    emailIsInvalid: 'Email is invalid',\n    your: 'Your',\n    password: 'password',\n    email: 'Email',\n    resetPassword: 'Reset password',\n    justRemembered: 'Just remembered',\n    fullNameIsRequired: 'Name is required',\n    fullNameIsTooLong: 'Name is too long',\n    emailIsRequired: 'Email is required',\n    passwordIsRequired: 'Password is required',\n    passwordLength: 'password length',\n    Join: 'Join',\n    today: 'today',\n    name: 'Name',\n    joinNow: 'joinNow',\n    byJoiningYouAgreeToOur: 'By joining you agree to our',\n    termsOfService: 'Terms of service',\n    and: 'and',\n    privacyPolicy: 'privacy policy',\n    alreadyHaveAnAcocunt: 'Already have an acocunt',\n    logIn: 'Log In',\n    welcomeBackTo: 'Welcome back to',\n    forgotPassword: 'Forgot password',\n    dontHaveAnAccount: 'Dont have an account',\n    emailSent: 'Email sent',\n    enterYourEmailToReset: 'Enter your email address to reset your password.',\n    resetEmailSent: 'Reset email sent',\n    weWillSendPasswordResetIf: 'We will send a password reset link if this email is associated with a Fancy account.'\n  },\n  en: {\n    language: 'English',\n    siteName: 'Dicky',\n    offline: 'You are no longer connected to the Internet',\n    online: 'Back online!',\n    confirmed: 'Thanks! Your email address has been confirmed.',\n    invalid: 'Invalid confirmation code!',\n    pleaseConfirmYourEmail: 'Please confirm your email address or  ',\n    updateYourEmail: 'Update your email',\n    or: 'or',\n    resendConfirmation: 'Resend confirmation',\n    join: 'Join',\n    login: 'Log In',\n    emailIsInvalid: 'Email is invalid',\n    your: 'Your',\n    password: 'password',\n    email: 'Email',\n    resetPassword: 'Reset password',\n    justRemembered: 'Just remembered',\n    fullNameIsRequired: 'Name is required',\n    fullNameIsTooLong: 'Name is too long',\n    emailIsRequired: 'Email is required',\n    passwordIsRequired: 'Password is required',\n    passwordLength: 'password length',\n    Join: 'Join',\n    today: 'today',\n    name: 'Name',\n    joinNow: 'Join now!',\n    byJoiningYouAgreeToOur: 'By joining you agree to our',\n    termsOfService: 'terms of service',\n    and: 'and',\n    privacyPolicy: 'privacy policy',\n    alreadyHaveAnAcocunt: 'Already have an acocunt',\n    logIn: 'Log In',\n    welcomeBackTo: 'Welcome back to',\n    forgotPassword: 'Forgot password',\n    dontHaveAnAccount: 'Dont have an account',\n    emailSent: 'Email sent',\n    enterYourEmailToReset: 'Enter your email address to reset your password.',\n    resetEmailSent: 'Reset email sent',\n    weWillSendPasswordResetIf: 'We will send a password reset link if this email is associated with a Fancy account.'\n  },\n}\nexport { Translations }\n\n\n\n\n\n","import React, { useContext } from 'react';\nimport { Context } from \"./context\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { Translations } from '../translations/dictionary'\nimport { Link } from 'react-router-dom';\n\nconst Warning: React.FC = (props) => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const txt = Translations[global.language];\n\n  const resend = async() => {\n    setGlobal({...global, warningMessage: 'sent'});\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    const response = await fetch(`${global.apiUrl}/register/resend_email`, {\n      method: 'POST',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n      body: JSON.stringify({jwtToken})\n    });\n    console.log(response)\n    if (response.status === 200) {\n      setTimeout(() => { \n        setGlobal({...global, warningMessage: 'confirm'});\n       }, 3000);\n    }\n  }\n  return (    \n    <div className=\"layout-root\">\n        <TransitionGroup>\n            <CSSTransition key={global.warningMessage} timeout={600} classNames='warningtext'>\n               <div className='warning-text'> \n                {global.warningMessage === 'confirm' && <p><span>{txt.pleaseConfirmYourEmail}</span> <Link to={{pathname: '/my/profile'}}><b>{txt.updateYourEmail}</b></Link> {txt.or} <b onClick={resend}>{txt.resendConfirmation}</b></p>}\n                {global.warningMessage === 'sent' && <p>{txt.emailSent}</p>}\n                {global.warningMessage === 'invalid' && <p>{txt.invalid}</p>}\n                {global.warningMessage === 'confirmed' && <p>{txt.confirmed}</p>}\n                {global.warningMessage === 'offline' && <p>{txt.offline}</p>}\n                {global.warningMessage === 'online' && <p>{txt.online}</p>}\n               </div>\n            </CSSTransition>\n        </TransitionGroup>\n    </div>\n  );\n}\n\nexport { Warning };","import React, { useContext } from 'react';\nimport { Context } from \"./context\";\nimport { Translations } from '../translations/dictionary';\nimport { Link } from 'react-router-dom';\n\nconst TopNav: React.FC = () => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const txt = Translations[global.language];\n\n  const openModal = (event: any) => {\n    setGlobal({...global, modal: true, modalState: event.target.id})\n  }\n\n  return (    \n    <div className=\"topNav\">\n        <div><Link to={{pathname: '/'}}><h1 className='logo'>{txt.siteName}</h1></Link></div>\n        <div></div>\n        {!global.loggedIn &&\n        <div>\n          <div className='buttons-desktop'>\n            <div onClick={openModal} id='join'><button className='joinButton'>{txt.join} <span className='siteName'>{txt.siteName}</span></button></div>\n            <div onClick={openModal} id='login'><button className='loginButton'>{txt.login}</button></div>\n          </div>\n          <div className='buttons-mobile'>\n            <div><Link to={{pathname: '/join'}}><button className='joinButton'>{txt.join} <span className='siteName'>{txt.siteName}</span></button></Link></div>\n            <div><Link to={{pathname: '/login'}}><button className='loginButton'>{txt.login}</button></Link></div>\n          </div>\n        </div>\n        }\n        {global.loggedIn &&\n        <div>{global.fullName}</div>\n        }\n    </div>\n  );\n}\n\nexport { TopNav };\n\n\n","import React, { useContext, useRef, useEffect, useState } from 'react';\nimport { Context } from \"./context\";\nimport { Translations } from '../translations/dictionary';\nimport { Link } from 'react-router-dom';\nimport loading from '../images/loading.svg';\nimport { CSSTransition } from 'react-transition-group'\n\nconst Join: React.FC = () => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const [state, setState] = useState({loading: false, fullNameError: '', emailError: '', passwordError: ''});\n  const txt = Translations[global.language];\n  const fullName = useRef<HTMLInputElement>(null);\n  const email = useRef<HTMLInputElement>(null);\n  const password = useRef<HTMLInputElement>(null);\n  const joinForm = useRef<HTMLFormElement>(null);\n\n  const validateFullName = (fullName: string) => {\n    if (!fullName) return txt.fullNameIsRequired;\n    if (fullName.length > 35) return txt.fullNameIsTooLong;\n    return '';\n  }\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    if (!email) return txt.emailIsRequired;\n    if (!emailRegex.test(email)) return txt.emailIsInvalid; \n    return ''; \n  }\n\n  const validatePassword = (password: string) => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?:.{6,})$/;\n    if (!password) return txt.passwordIsRequired;\n    if (!passwordRegex.test(password)) return txt.passwordLength;\n    return '';\n  }\n\n  useEffect(() => {\n    if (joinForm.current) joinForm.current.reset();\n    if (fullName.current) fullName.current.focus();\n  }, [global, setGlobal]);\n\n  const close = () => setGlobal({...global, modal: false});\n  const logIn = () => setGlobal({...global, modalState: 'login'});\n\n  const join = async(event: any) => {\n    event.preventDefault();\n    if (fullName.current && email.current && password.current) {\n      const fullNameError = validateFullName(fullName.current.value);\n      const emailError = validateEmail(email.current.value);\n      const passwordError = validatePassword(password.current.value);\n      let loading = false\n      if (!fullNameError && !emailError && !passwordError) loading = true;\n      setState({...state, loading, fullNameError, emailError, passwordError});\n      setTimeout(() => {\n        setState({...state, fullNameError: '', emailError: '', passwordError: ''});\n       }, 2200);\n      if (loading === true) {\n        const response = await fetch(`${global.apiUrl}/register`, {\n          method: 'POST',\n          headers: {'Accept': 'application/json','Content-Type': 'application/json'},\n          body: JSON.stringify({fullName: fullName.current.value, email: email.current.value, password: password.current.value})\n        });\n        const content = await response.json();\n        if (response.status === 200) {\n          localStorage.setItem(\"warning\", 'confirm');\n          localStorage.setItem(\"fullName\", fullName.current.value);\n          localStorage.setItem(\"jwtToken\", content.jwtToken);\n          setState({...state, loading: false, fullNameError: '', emailError: '', passwordError: ''});\n          setGlobal({...global, modal: false, warning: true, warningMessage: 'confirm', loggedIn: true, fullName: fullName.current.value});\n        } else {\n          setState({...state, emailError: content.message || response.status});\n        }\n      }\n    }\n  }\n\n  return (    \n    <div>\n        <h2>{txt.join}</h2>\n        <h3>{txt.siteName} <span className='blue'>{txt.today}</span></h3>\n        <form ref={joinForm}>\n          \n          <label>{txt.name}</label>\n          <input type=\"text\" ref={fullName}/>\n          <CSSTransition in={state.fullNameError ? true : false} appear={state.fullNameError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.fullNameError}</small>\n          </CSSTransition>\n\n          <label>{txt.email}</label>\n          <input type=\"text\" ref={email}/>\n          <CSSTransition in={state.emailError ? true : false} appear={state.emailError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.emailError}</small>\n          </CSSTransition>\n\n\n          <label>{txt.password}</label>\n          <input type=\"password\" ref={password}/>\n          <CSSTransition in={state.passwordError ? true : false} appear={state.passwordError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.passwordError}</small>\n          </CSSTransition>\n\n          <button color='primary' onClick={join}>\n            {!state.loading ? txt.joinNow : <img src={loading} alt=\"loading\" className='loading'/>}\n          </button>\n\n          <small>{txt.byJoiningYouAgreeToOur} <b onClick={close}><Link to={{pathname: '/terms'}}>{txt.termsOfService}</Link></b> {txt.and} <b onClick={close}><Link to={{pathname: '/privacy'}}>{txt.privacyPolicy}</Link></b></small>\n        \n        </form>\n        <p className='center'>{txt.alreadyHaveAnAcocunt}? <b className='blue' onClick={logIn}>{txt.logIn}</b></p>        \n    </div>\n  );\n}\n\nexport { Join };\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Context } from \"./context\";\nimport { Translations } from '../translations/dictionary';\nimport loading from '../images/loading.svg';\nimport { CSSTransition } from 'react-transition-group'\n\nconst Login: React.FC = (props) => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const [state, setState] = useState({loading: false, emailError: '', passwordError: ''});\n  const txt = Translations[global.language];\n  const email = useRef<HTMLInputElement>(null);\n  const password = useRef<HTMLInputElement>(null);\n  const loginForm = useRef<HTMLFormElement>(null);\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    if (!email) return txt.emailIsRequired;\n    if (!emailRegex.test(email)) return txt.emailIsInvalid; \n    return ''; \n  }\n\n  const validatePassword = (password: string) => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?:.{6,})$/;\n    if (!password) return txt.passwordIsRequired;\n    if (!passwordRegex.test(password)) return txt.passwordLength;\n    return '';\n  }\n\n  useEffect(() => {\n    if (loginForm.current) loginForm.current.reset();\n    if (email.current) email.current.focus();\n  }, [global, setGlobal]);\n\n  const join = () => setGlobal({...global, modalState: 'join'});\n  const reset = () => setGlobal({...global, modalState: 'reset'});\n  \n  const login = async(event: any) => {\n    event.preventDefault();\n    if (email.current && password.current) {\n      const emailError = validateEmail(email.current.value);\n      const passwordError = validatePassword(password.current.value);\n      let loading = false;\n      if (!emailError && !passwordError) {\n        loading = true;\n      }\n      setState({...state, loading, emailError, passwordError});\n      setTimeout(() => {\n        setState({...state, emailError: '', passwordError: ''});\n       }, 2200);\n      if (loading === true) {\n        const response = await fetch(`${global.apiUrl}/login`, {\n          method: 'POST',\n          headers: {'Accept': 'application/json','Content-Type': 'application/json'},\n          body: JSON.stringify({email: email.current.value, password: password.current.value})\n        });\n        const content = await response.json();\n        if (response.status === 200) {\n            let warning = false;\n            let warningMessage = ''\n            if (!content.emailConfirmed) {\n              warning = true;\n              warningMessage = 'confirm';\n              localStorage.setItem('warning', 'confirm')\n            }\n            localStorage.setItem('jwtToken', content.jwtToken);\n            localStorage.setItem('fullName', content.fullName);\n            setState({...state, loading: false, emailError: '', passwordError: ''});\n            setGlobal({...global, modal: false, warning, warningMessage, loggedIn: true, fullName: content.fullName});\n        } else {\n          setState({...state, emailError: content.message || content[0].message});\n        }\n      }\n    }\n  }\n\n  return (    \n    <div>\n        <h2>{txt.logIn}</h2>\n        <h3>{txt.welcomeBackTo} <span className='blue'>{txt.siteName}</span></h3>\n        <form ref={loginForm}>\n          \n          <label>{txt.email}</label>\n          <input type=\"text\" name=\"email\" ref={email}/>\n          <CSSTransition in={state.emailError ? true : false} appear={state.emailError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.emailError}</small>\n          </CSSTransition>\n\n\n          \n          <label>{txt.password}</label>\n          <input type=\"password\" name=\"password\" ref={password}/>\n          <CSSTransition in={state.passwordError ? true : false} appear={state.passwordError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.passwordError}</small>\n          </CSSTransition>\n\n          <b className='right blue' onClick={reset}>{txt.forgotPassword}?</b>\n          \n          <button color='primary' onClick={login}>\n            {!state.loading ? txt.login : <img src={loading} alt=\"loading\" className='loading'/>}\n          </button>\n\n        </form>\n        <p className='center'>{txt.dontHaveAnAccount}? <b className='blue' onClick={join}>{txt.join} {txt.siteName}</b></p>    \n    </div>\n  );\n}\n\nexport { Login };\n\n\n","import React, { useContext, useRef, useEffect, useState } from 'react';\nimport { Context } from \"./context\";\nimport { Translations } from '../translations/dictionary';\nimport loading from '../images/loading.svg';\nimport { CSSTransition } from 'react-transition-group'\n\nconst Reset: React.FC = () => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const [state, setState] = useState({loading: false, emailError: ''});\n  const txt = Translations[global.language];\n  const email = useRef<HTMLInputElement>(null);\n  const resetForm = useRef<HTMLFormElement>(null);\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    if (!email) return txt.emailIsRequired;\n    if (!emailRegex.test(email)) return txt.emailIsInvalid; \n    return ''; \n  }\n\n  useEffect(() => {\n    if (resetForm.current) resetForm.current.reset();\n    if (email.current) email.current.focus();\n  }, [global, setGlobal]);\n\n  const logIn = () => {\n    setGlobal({...global, modalState: 'login'});\n  }\n  const reset = async(event: any) => {\n    event.preventDefault();\n    setState({...state, loading: true});\n\n    if (email.current) {\n    const emailError = validateEmail(email.current.value);\n    let loading = false;\n    if (!emailError) {\n      loading = true;\n    }\n    setState({...state, loading, emailError});\n    setTimeout(() => {\n      setState({...state, emailError: ''});\n     }, 2200);\n    if (loading === true) {\n      const response = await fetch(`${global.apiUrl}/login/reset_password`, {\n        method: 'POST',\n        headers: {'Accept': 'application/json','Content-Type': 'application/json'},\n        body: JSON.stringify({email: email.current.value})\n      });\n      if (response.status === 200) {\n        setGlobal({...global, modalState: 'sent'});\n      }\n    }\n  }\n\n  }\n  return (    \n    <div>\n      <h2>{txt.resetPassword}</h2>\n        <h3>{txt.enterYourEmailToReset}</h3>\n        <form ref={resetForm}>\n          <label>Email</label>\n          <input type=\"text\" name=\"email\" ref={email}/>\n          <CSSTransition in={state.emailError ? true : false} appear={state.emailError ? true : false} timeout={400} classNames='error'>\n            <small className='error'>{state.emailError}</small>\n          </CSSTransition>\n          <button color='primary' onClick={reset}>\n            {!state.loading ? txt.resetPassword : <img src={loading} alt=\"loading\" className='loading'/>}\n          </button>\n        </form>\n        <p className='center'>{txt.justRemembered}? <b className='blue' onClick={logIn}>{txt.login}</b></p>   \n    </div>\n  );\n}\n\nexport { Reset };\n","import React, { useContext, useRef } from 'react';\nimport { Context } from \"./context\";\nimport { Translations } from '../translations/dictionary';\n\nconst Sent: React.FC = () => {\n  const { global } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const txt = Translations[global.language];\n  const sentForm = useRef<HTMLFormElement>(null);\n\n  return (    \n    <div>\n      <h2>{txt.resetEmailSent}</h2>\n        <h3>{txt.weWillSendPasswordResetIf}</h3>\n        <form ref={sentForm}>\n          <button color='primary'>{txt.login}</button>\n        </form>\n    </div>\n  );\n}\n\nexport { Sent };\n","import React, { useContext, useEffect, useRef, useState} from 'react';\nimport { Context } from \"./context\";\nimport { Warning } from \"./warning\";\nimport { TopNav } from \"./topnav\";\nimport { Join } from \"./join\";\nimport { Login } from \"./login\";\nimport { Reset } from \"./reset\";\nimport { Sent } from \"./sent\";\nimport { CSSTransition } from 'react-transition-group'\n\ninterface propsInterface {\n  location: any; \n}\n\nconst Layout: React.FC<propsInterface> = (props) => {\n  const { global, setGlobal } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n  const [state, setState] = useState({ admin: false }); \n\n  let layoutGrid = useRef<HTMLDivElement>(null);\n  let layoutHeader = useRef<HTMLDivElement>(null);\n  \n  const closeModal = () => {\n    setGlobal({...global, modal: false});\n  }\n\n  useEffect(() => {\n    const currentFolder = props.location.pathname.split('/')[1];\n    currentFolder === 'my' ? setState({ admin: true }) : setState({ admin: false })\n  }, [props.location])\n\n  useEffect(() => {\n    const modeChanged = (event: { matches: boolean; }) => {\n      setGlobal({...global, darkMode: event.matches});\n    }\n    const nowOffline = () => {\n      setGlobal({...global, warning: true, warningMessage: 'offline'});\n    }\n    const nowOnline = () => {\n      setGlobal({...global,  warning: true, warningMessage: 'online'});\n      setTimeout(() => {\n        setGlobal({...global,  warning: false, warningMessage: ''});\n       }, 3000);\n    }\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener(\"change\", modeChanged);\n    window.addEventListener('online',  nowOnline);\n    window.addEventListener('offline', nowOffline);\n    return () => {\n      window.matchMedia('(prefers-color-scheme: dark)').removeEventListener(\"change\", modeChanged);\n      window.removeEventListener('online', nowOnline);\n      window.removeEventListener('offline', nowOffline);\n    } \n  }, [global, setGlobal]);\n\n  return (    \n    <div className=\"layout-grid\" ref={layoutGrid}>\n\n      <header className=\"layout-header\" ref={layoutHeader}>\n        <CSSTransition in={global.warning} appear={global.warning} timeout={400} classNames='warning'>\n          <div className='warning'><Warning/></div>\n        </CSSTransition>\n        <div className=\"layout-navigation\"><TopNav/></div>\n      </header>\n\n      <CSSTransition in={global.warning} appear={global.warning} timeout={400} classNames='warningbody'>\n        <span className='warning-false'>\n          {state.admin  &&\n            <main className=\"layout-admin\">\n              <div className='page-holder'>{props.children}</div>\n              <CSSTransition in={global.warning} appear={global.warning} timeout={400} classNames='warningnav'>\n              <div className='admin-nav'><div className='admin-fixed'>Admin Nav</div></div>\n              </CSSTransition>\n            </main>\n          }\n          {!state.admin && <div className='page-holder'>{props.children}</div>}\n        </span>\n      </CSSTransition>\n\n      <footer className='layout-footer'>Footer</footer>\n      <footer className='mobile-footer'>Mobile Footer</footer>\n\n      <CSSTransition in={global.modal} appear={global.modal} timeout={400} classNames='modal'>\n        <div className='modal'>\n          <div className='closeModal' onClick={closeModal}>+</div>\n          <CSSTransition in={global.modal} appear={global.modal} timeout={400} classNames='modalWindow'>\n            <div className='modalWindow'>\n              {global.modalState === 'join' && <div className='modalCard card'><Join/></div>}\n              {global.modalState === 'login' && <div className='modalCard card'><Login/></div>}\n              {global.modalState === 'reset' && <div className='modalCard card'><Reset/></div>}\n              {global.modalState === 'sent' && <div className='modalCard card'><Sent/></div>}\n            </div>\n          </CSSTransition>\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n\nexport { Layout };","import React from 'react';\n\nconst Home: React.FC = () => {\n\n  return (\n    <span className='page'>\n      <div>Home</div>\n    </span>\n  );\n}\n\nexport { Home };","import React, {useContext} from 'react';\nimport { Context } from '../components/context';\n\nconst Face: React.FC = () => {\n  const { setGlobal, global } = useContext(Context) as {global: any; setGlobal: React.Dispatch<React.SetStateAction<any>>};\n\n\n  return (\n    <span className='page'>\n      Face\n    </span>\n  );\n}\n\nexport { Face };","import React from 'react';\n\nconst NotFound: React.FC = () => {\n  return (    \n    <div>NotFound</div>\n  );\n}\n\nexport { NotFound };","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl)\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport { Router } from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('shell'));\nserviceWorker.register();\n","import React, { useState } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Context } from \"./components/context\";\nimport { Layout } from \"./components/layout\";\nimport { Home } from './routes/home';\nimport { Face } from './routes/face';\nimport { NotFound } from './routes/not-found';\n\n\nconst Router: React.FC = () => {\n\n  const [global, setGlobal] = useState({\n    language: 'en',\n    darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches || false,\n    apiUrl: 'http://127.0.0.1:9990',\n    warning: localStorage.getItem(\"warning\") ? true : false,\n    warningMessage: localStorage.getItem(\"warning\"),\n    modal: false,\n    modalState: '',\n    loggedIn: localStorage.getItem(\"jwtToken\") ? true : false,\n    fullName: localStorage.getItem(\"fullName\") || '',\n  });\n\n  return (\n    <Context.Provider value={{ global, setGlobal }}>\n      <BrowserRouter>\n        <Route render={({ location }) => (\n          <Layout location={ location }>\n            <Switch location={ location }>\n              <Route exact path = '/' component = { Home } />\n              <Route exact path = '/my/profile/' component = { Home } />\n              <Route exact path = '/my/face/' component = { Face } />\n              <Route component = { NotFound }/>\n            </Switch>\n          </Layout>\n        )} />\n      </BrowserRouter>\n    </Context.Provider>\n  );\n}\n\nexport { Router };\n"],"sourceRoot":""}